{"version":3,"sources":["../../../../server/api/thing/thing.integration.js"],"names":[],"mappings":"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","file":"thing.integration.js","sourcesContent":["'use strict';\r\n\r\nvar app = require('../..');\r\nimport request from 'supertest';\r\n\r\nvar newThing;\r\n\r\ndescribe('Thing API:', function() {\r\n\r\n  describe('GET /api/things', function() {\r\n    var things;\r\n\r\n    beforeEach(function(done) {\r\n      request(app)\r\n        .get('/api/things')\r\n        .expect(200)\r\n        .expect('Content-Type', /json/)\r\n        .end((err, res) => {\r\n          if (err) {\r\n            return done(err);\r\n          }\r\n          things = res.body;\r\n          done();\r\n        });\r\n    });\r\n\r\n    it('should respond with JSON array', function() {\r\n      expect(things).to.be.instanceOf(Array);\r\n    });\r\n\r\n  });\r\n\r\n  describe('POST /api/things', function() {\r\n    beforeEach(function(done) {\r\n      request(app)\r\n        .post('/api/things')\r\n        .send({\r\n          name: 'New Thing',\r\n          info: 'This is the brand new thing!!!'\r\n        })\r\n        .expect(201)\r\n        .expect('Content-Type', /json/)\r\n        .end((err, res) => {\r\n          if (err) {\r\n            return done(err);\r\n          }\r\n          newThing = res.body;\r\n          done();\r\n        });\r\n    });\r\n\r\n    it('should respond with the newly created thing', function() {\r\n      expect(newThing.name).to.equal('New Thing');\r\n      expect(newThing.info).to.equal('This is the brand new thing!!!');\r\n    });\r\n\r\n  });\r\n\r\n  describe('GET /api/things/:id', function() {\r\n    var thing;\r\n\r\n    beforeEach(function(done) {\r\n      request(app)\r\n        .get('/api/things/' + newThing._id)\r\n        .expect(200)\r\n        .expect('Content-Type', /json/)\r\n        .end((err, res) => {\r\n          if (err) {\r\n            return done(err);\r\n          }\r\n          thing = res.body;\r\n          done();\r\n        });\r\n    });\r\n\r\n    afterEach(function() {\r\n      thing = {};\r\n    });\r\n\r\n    it('should respond with the requested thing', function() {\r\n      expect(thing.name).to.equal('New Thing');\r\n      expect(thing.info).to.equal('This is the brand new thing!!!');\r\n    });\r\n\r\n  });\r\n\r\n  describe('PUT /api/things/:id', function() {\r\n    var updatedThing;\r\n\r\n    beforeEach(function(done) {\r\n      request(app)\r\n        .put('/api/things/' + newThing._id)\r\n        .send({\r\n          name: 'Updated Thing',\r\n          info: 'This is the updated thing!!!'\r\n        })\r\n        .expect(200)\r\n        .expect('Content-Type', /json/)\r\n        .end(function(err, res) {\r\n          if (err) {\r\n            return done(err);\r\n          }\r\n          updatedThing = res.body;\r\n          done();\r\n        });\r\n    });\r\n\r\n    afterEach(function() {\r\n      updatedThing = {};\r\n    });\r\n\r\n    it('should respond with the updated thing', function() {\r\n      expect(updatedThing.name).to.equal('Updated Thing');\r\n      expect(updatedThing.info).to.equal('This is the updated thing!!!');\r\n    });\r\n\r\n  });\r\n\r\n  describe('DELETE /api/things/:id', function() {\r\n\r\n    it('should respond with 204 on successful removal', function(done) {\r\n      request(app)\r\n        .delete('/api/things/' + newThing._id)\r\n        .expect(204)\r\n        .end((err, res) => {\r\n          if (err) {\r\n            return done(err);\r\n          }\r\n          done();\r\n        });\r\n    });\r\n\r\n    it('should respond with 404 when thing does not exist', function(done) {\r\n      request(app)\r\n        .delete('/api/things/' + newThing._id)\r\n        .expect(404)\r\n        .end((err, res) => {\r\n          if (err) {\r\n            return done(err);\r\n          }\r\n          done();\r\n        });\r\n    });\r\n\r\n  });\r\n\r\n});\r\n"]}